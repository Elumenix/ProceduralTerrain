// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

StructuredBuffer<int> _Dimension; // {mapWidth, mapHeight}, based on number of faces, not vertices
StructuredBuffer<float3> _VertexBuffer;
RWStructuredBuffer<float3> _NormalBuffer : register(u0);
uint numVertices;

[numthreads(64,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numVertices) return;

    int width = _Dimension[0] + 1;
    int x = id.x % width;
    int y = id.x / width;
    float3 normalSum = float3(0, 0, 0);

    // Check 4 adjacent quads (6 triangles total)
    // Quad 1: Top-left
    if (x > 0 && y > 0)
    {
        float3 left = _VertexBuffer[id.x - 1];
        float3 top = _VertexBuffer[id.x - width];
        float3 topLeft = _VertexBuffer[id.x - width - 1];
        
        // Triangle 1: Current -> Left -> Top
        float3 AB = left - _VertexBuffer[id.x];
        float3 AC = top - _VertexBuffer[id.x];
        normalSum += cross(AC, AB); // Unity left-handed
        
        // Triangle 2: Left -> TopLeft -> Top
        AB = topLeft - left;
        AC = top - left;
        normalSum += cross(AC, AB);
    }

    // Quad 2: Top-right
    if (x < _Dimension[0] && y > 0)
    {
        float3 right = _VertexBuffer[id.x + 1];
        float3 top = _VertexBuffer[id.x - width];
        float3 topRight = _VertexBuffer[id.x - width + 1];
        
        // Triangle 1: Current -> Top -> Right
        float3 AB = top - _VertexBuffer[id.x];
        float3 AC = right - _VertexBuffer[id.x];
        normalSum += cross(AC, AB);
        
        // Triangle 2: Top -> TopRight -> Right
        AB = topRight - top;
        AC = right - top;
        normalSum += cross(AC, AB);
    }

    // Quad 3: Bottom-right
    if (x < _Dimension[0] && y < _Dimension[1])
    {
        float3 right = _VertexBuffer[id.x + 1];
        float3 bottom = _VertexBuffer[id.x + width];
        float3 bottomRight = _VertexBuffer[id.x + width + 1];
        
        // Triangle 1: Current -> Right -> Bottom
        float3 AB = right - _VertexBuffer[id.x];
        float3 AC = bottom - _VertexBuffer[id.x];
        normalSum += cross(AC, AB);
        
        // Triangle 2: Right -> BottomRight -> Bottom
        AB = bottomRight - right;
        AC = bottom - right;
        normalSum += cross(AC, AB);
    }

    // Quad 4: Bottom-left
    if (x > 0 && y < _Dimension[1])
    {
        float3 left = _VertexBuffer[id.x - 1];
        float3 bottom = _VertexBuffer[id.x + width];
        float3 bottomLeft = _VertexBuffer[id.x + width - 1];
        
        // Triangle 1: Current -> Bottom -> Left
        float3 AB = bottom - _VertexBuffer[id.x];
        float3 AC = left - _VertexBuffer[id.x];
        normalSum += cross(AC, AB);
        
        // Triangle 2: Bottom -> BottomLeft -> Left
        AB = bottomLeft - bottom;
        AC = left - bottom;
        normalSum += cross(AC, AB);
    }

    _NormalBuffer[id.x] = normalize(normalSum);
}

