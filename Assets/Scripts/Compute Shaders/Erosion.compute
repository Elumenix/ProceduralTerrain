// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#define MAX_UINT 4294967295

// Buffers
RWStructuredBuffer<int> _HeightBuffer; // float3 isn't used because they don't support atomic operations
StructuredBuffer<int> _RainDropBuffer;
StructuredBuffer<uint> _Dimension; // {mapWidth, mapHeight} Refers to number of faces, not vertices

// Variables
uint numVertices;
uint radius;
int precision;
float inertia;
float maxSediment;
float depositionRate;
float evaporationRate;
float softness;
float gravity;
float minSlope;

float3 GetGradientAndHeight(float2 pos)
{
    // Get row/column of top left index of (square) face
    int col = (int)pos.x;
    int row = (int)pos.y;
    int index = row * (_Dimension[0] + 1) + col;

    // Get height of all vertices of square
    float nw = (float)_HeightBuffer[index] / precision;                           // Top Left
    float ne = (float)_HeightBuffer[index + 1] / precision;                       // Top Right
    float sw = (float)_HeightBuffer[index + (_Dimension[0] + 1)] / precision;     // Bottom Left
    float se = (float)_HeightBuffer[index + (_Dimension[0] + 1) + 1] / precision; // Bottom Right
    
    // Get coordinates of drop in (square) face.
    // Top left is (0,0)
    float u = pos.x - col;
    float v = pos.y - row;

    // Bilinear Interpolation of heights to get gradient direction and height
    float angleX = (ne - nw) * (1-v) + (se - sw) * v;
    float angleY = (sw - nw) * (1-u) + (se - ne) * u;
    float height = nw * (1-u) * (1-v) + ne * u * (1-v) + sw * (1-u) * v + se * u * v;

    return float3(angleX, angleY, height);
}


// Simulate a raindrop picking up and depositing sediment
void SimulateDrop(uint vert) 
{
    // These will be updated at the end of the loop
    int col = vert % (_Dimension[0] + 1);
    int row = vert / (_Dimension[0] + 1);
    int step = 0;
    
    // Local drop variables
    // Position is on a grid between mapWidth + 1 and mapHeight + 1
    // Raindrop will always start directly in the middle of a face, and at least 0.5 away from the edge of the world
    float2 position = float2(col + 0.5f, row + 0.5f);
    float velocity = 1.0f; // START VELOCITY VARIABLE?
    float2 dir = float2(0.0f, 0.0f);
    float volume = 1;
    float sediment = 0;

    

    // Max Steps to ensure drop doesn't move endlessly
    // TODO: Perhaps find a way so that heightAndGradient aren't calculated twice
    int maxSteps = 300;

    //  COULD BE FOR LOOP IF ONLY USING STEPS, MAY BE MORE EFFICIENT
    while (step < maxSteps)
    {
        // Get location variables
        col = (int)position.x;
        row = (int)position.y;
        
        float3 g = GetGradientAndHeight(position);
        float2 gradient = float2(g.x, g.y);
        float oldHeight = g.z;

        // Update flow direction based on gradient
        // Inertia determines how much gradient is taken into account
        dir = dir * inertia - gradient * (1 - inertia);
        if (length(dir) == 0) return; // drop is no longer moving
        dir = normalize(dir); // Drop moves fixed distance, so erosion is evenly distributed

        // Find next position
        float2 newPos = position + dir;

        // COULD EXCLUDE BORDERS HERE IF NECESSARY
        // Finished if the drop goes off the map : vertices exactly on the right or bottom border should also be considered off
        if (newPos.x < 0.0f || newPos.y < 0.0f || newPos.x >= (float)_Dimension[0] || newPos.y >= (float)_Dimension[1]) return;
        
        float newHeight = GetGradientAndHeight(newPos).z;
        float heightDif = newHeight - oldHeight;

        // Speed and size of the drop determine how much sediment it can hold
        float dropCapacity = max(-heightDif, minSlope) * velocity * volume * maxSediment;
        
        // is drop ascending or full
        if (heightDif > 0 || sediment > dropCapacity)
        {
            float depositAmount;
            
            if (heightDif > 0) // Drop was ascending
            {
                // Either completely fill pit at oldPos or deposit all sediment there
                depositAmount = min(sediment, heightDif);
            }
            else
            {
                // A percentage of the surplus sediment is dropped
                depositAmount = (sediment - dropCapacity) * depositionRate;    
            }

            // Remove the lost sediment from the drop
            sediment -= depositAmount;

            // Get coordinates of drop in (square) face.
            // Top left is (0,0)
            float u = position.x - col;
            float v = position.y - row;
            int index = row * (_Dimension[0] + 1) + col;
            
            // Add it to the vertices of the (square) face the drop is on
            // Weight for each vertex is bilinearly interpolated based on drops position in the face
            InterlockedAdd(_HeightBuffer[index], (int)round(depositAmount * (1-u) * (1-v) * precision));                 // Top Left
            InterlockedAdd(_HeightBuffer[index + 1], (int)round(depositAmount * u * (1-v) * precision));                 // Top Right
            InterlockedAdd(_HeightBuffer[index + _Dimension[0] + 1], (int)round(depositAmount * (1-u) * v * precision)); // Bottom Left
            InterlockedAdd(_HeightBuffer[index + _Dimension[0] + 2], (int)round(depositAmount * u * v * precision));     // Bottom Right
        }
        else // downhill and the drop can hold more sediment
        {
            // Amount of sediment to take won't be greater than the height difference
            float erosionAmount = min((dropCapacity - sediment) * softness, -heightDif);
            sediment += erosionAmount;

            int minC = (int)floor(position.x - radius);
            int maxC = (int)ceil(position.x + radius);
            int minR = (int)floor(position.y - radius);
            int maxR = (int)ceil(position.y + radius);

            float norm = 0;
            int r,c;
            float2 vertexPos;
            float d;
            // First pass, which finds the normalization factor
            for (r = minR; r <= maxR; r++)
            {
                for (c = minC; c <= maxC; c++)
                {
                    vertexPos = float2(c, r);
                    d = length(position - vertexPos);

                    if (d <= (float)radius)
                    {
                        norm += radius - d;
                    }
                }
            }

            minC = max(0, (int)floor(position.x - radius));
            maxC = min(_Dimension[0], (int)ceil(position.x + radius));
            minR = max(0, (int)floor(position.y - radius));
            maxR = min(_Dimension[1], (int)ceil(position.y + radius));

            // Second pass actually lowers terrain based on erosionAmount and weight of points
            for (r = minR; r <= maxR; r++)
            {
                for (c = minC; c <= maxC; c++)
                {
                    int index = r * (_Dimension[0] + 1) + c;
                    vertexPos = float2(c, r);
                    d = length(position - vertexPos);

                    if (d <= (float)radius)
                    {
                        // Weight is normalized to be between 0 and 1 then that percentage is multiplied by the total amount eroded
                        // Because drop is on the map, vertices will be within the radius, so norm is never 0
                        float weight = max(0, radius - d) / norm;

                        // Make sure that terrain won't erode past the bottom of the map
                        float remainingHeight = (float)_HeightBuffer[index] / precision;
                        float delta = min(erosionAmount * weight, remainingHeight + 2);

                        // Erode the terrain based on the weight this vertex should be eroded
                        InterlockedAdd(_HeightBuffer[index], (int)round(-delta * precision));
                    }
                }
            }
        }

        // Velocity is adjusted depending upon the slope and gravity, max prevents negative square root
        velocity = sqrt(max(0.0f, velocity * velocity + heightDif * -gravity));

        // Update Position
        position = newPos;
        volume *= 1-evaporationRate;

        // Update tracked variables
        step++;
    }
}


[numthreads(1024,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numVertices) return; // Don't need to iterate on
    
    SimulateDrop(_RainDropBuffer[id.x]);
}
