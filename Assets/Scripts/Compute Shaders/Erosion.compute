// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#define MAX_UINT 4294967295

// Buffers
RWStructuredBuffer<float3> _VertexBuffer;
StructuredBuffer<int> _RainDropBuffer;
StructuredBuffer<uint> _Dimension; // {mapWidth, mapHeight} Refers to number of faces, not vertices

// Variables
uint numVertices;
uint radius;
float inertia;
float maxSediment;
float depositionRate;
float evaporationRate;
float softness;
float gravity;
float minSlope;

float3 GetGradientAndHeight(float2 pos)
{
    // Get row/column of top left index of (square) face
    int row = (int)pos.x;
    int col = (int)pos.y;
    int index = col * (_Dimension[0] + 1) + row;

    // Get height of all vertices of square
    float nw = _VertexBuffer[index].y;                           // Top Left
    float ne = _VertexBuffer[index + 1].y;                       // Top Right
    float sw = _VertexBuffer[index + (_Dimension[0] + 1)].y;     // Bottom Left
    float se = _VertexBuffer[index + (_Dimension[0] + 1) + 1].y; // Bottom Right
    
    // Get coordinates of drop in (square) face.
    // Top left is (0,0)
    float u = pos.x - row;
    float v = pos.y - col;

    // Bilinear Interpolation of heights to get gradient direction and height
    float angleX = (ne - nw) * (1-v) + (se - sw) * v;
    float angleY = (sw - nw) * (1-u) + (se - ne) * u;
    float height = nw * (1-u) * (1-v) + ne * u * (1-v) + sw * (1-u) * v + se * u * v;

    return float3(angleX, angleY, height);
}


// Simulate a raindrop picking up and depositing sediment
void SimulateDrop(uint vert) 
{
    // Local drop variables
    // Position is on a grid between mapWidth + 1 and mapHeight + 1
    // It is guaranteed that the starting vertex won't be exactly on mapWidth + 1 or mapHeight + 1
    float2 position = float2(float(vert) % (_Dimension[0] + 1), float(vert) / (_Dimension[0] + 1));
    float velocity = 1.0f; // START VELOCITY VARIABLE?
    float2 dir = float2(0.0f, 0.0f);
    float volume = 1;
    float sediment = 0;

    // These will be updated at the end of the loop
    int row = (int)position.x;
    int col = (int)position.y;
    int step = 0;

    // Max Steps to ensure drop doesn't move endlessly
    // TODO: Perhaps find a way so that heightAndGradient aren't calculated twice
    int maxSteps = 100;
    
    while (volume > .001 /*step < maxSteps*/)
    {
        float3 g = GetGradientAndHeight(position);
        float2 gradient = float2(g.x, g.y);
        float oldHeight = g.z;

        // Update flow direction based on gradient
        // Inertia determines how much gradient is taken into account
        dir = dir * inertia - gradient * (1 - inertia);
        if (length(dir) == 0) return; // drop is no longer moving
        dir = normalize(dir); // Drop moves fixed distance, so erosion is evenly distributed

        // Find next position
        float2 newPos = position + dir;

        // Finished if drop goes off the map : vertices exactly on the right or bottom border should also be considered off
        if (newPos.x < 0.0f || newPos.y < 0.0f || newPos.x >= (float)_Dimension[0] || newPos.y >= (float)_Dimension[1]) return;
        
        float newHeight = GetGradientAndHeight(newPos).z;
        float heightDif = newHeight - oldHeight;

        // Speed and size of the drop determine how much sediment it can hold
        float dropCapacity = max(-heightDif, minSlope) * velocity * volume * maxSediment;

        
        // is drop ascending or full
        if (heightDif > 0 || sediment > dropCapacity)
        {
            float depositAmount;
            

            if (heightDif > 0) // Drop was ascending
            {
                // Either completely fill pit at oldPos or deposit all sediment there
                depositAmount = min(sediment, heightDif);
            }
            else
            {
                // A percentage of the surplus sediment is dropped
                depositAmount = (sediment - dropCapacity) * depositionRate;    
            }

            // Get coordinates of drop in (square) face.
            // Top left is (0,0)
            float u = position.x - row;
            float v = position.y - col;

            // Remove the lost sediment from the drop
            sediment -= depositAmount;
            int index = col * (_Dimension[0] + 1) + row;
            
            // Add it to the vertices of the (square) face the drop is on
            // Weight for each vertex is bilinearly interpolated based on drops position in the face
            _VertexBuffer[index].y += depositAmount * (1-u) * (1-v);                     // Top Left
            _VertexBuffer[index + 1].y += depositAmount * u * (1-v);                     // Top Right
            _VertexBuffer[index + (_Dimension[0] + 1)].y += depositAmount * (1-u) * v;   // Bottom Left
            _VertexBuffer[index + (_Dimension[0] + 1) + 1].y += depositAmount * u * v;   // Bottom Right
        }
        else // downhill and the drop can hold more sediment
        {
            // Amount of sediment to take won't be greater than the height difference
            float erosionAmount = min((dropCapacity - sediment) * softness, -heightDif);


            // Remove the lost sediment from the drop
            sediment += erosionAmount;

            int minR = max(0, (int)floor(position.x - radius));
            int maxR = min(_Dimension[0], (int)ceil(position.x + radius));
            int minC = max(0, (int)floor(position.y - radius));
            int maxC = min(_Dimension[1], (int)ceil(position.y + radius));

            float norm = 0;
            int r,c;
            float2 vertexPos;
            float d;
            // First pass, which finds the normalization factor
            for (r = minR; r < maxR; r++)
            {
                for (c = minC; c < maxC; c++)
                {
                    vertexPos = float2(r, c);
                    d = length(position - vertexPos);

                    if (d <= (float)radius)
                    {
                        norm += radius - length(float2(r, c) - position);
                    }
                }
            }

            // Second pass actually lowers terrain based on erosionAmount and weight of points
            for (r = minR; r < maxR; r++)
            {
                for (c = minC; c < maxC; c++)
                {
                    int index = c * (_Dimension[0] + 1) + r;
                    vertexPos = float2(r, c);
                    d = length(position - vertexPos);

                    if (d <= (float)radius)
                    {
                        // Weight is normalized to be between 0 and 1 then that percentage is multiplied by the total amount eroded
                        float weight = max(0, radius - length(float2(r, c) - position)) / norm;
                        
                        // Give a min distance terrain can fall so that drops don't pool at the edge of the terrain
                        // and creat deep and unfathomable pits that can cause errors
                        _VertexBuffer[index].y = max(-2, _VertexBuffer[index].y - erosionAmount * weight);
                    }
                }
            }
        }

        // Velocity is adjusted depending upon the slope and gravity, max prevents negative square root
        //velocity = sqrt(pow(velocity,2) + max(-heightDif,0) * gravity);
        velocity = sqrt(max(0.0f, velocity * velocity + -heightDif * gravity));

        // Update Position
        position = newPos;
        volume = volume * (1-evaporationRate);

        step++;
        row = (int)position.x;
        col = (int)position.y;
    }
}


[numthreads(1024,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numVertices) return; // Don't need to iterate on
    
    SimulateDrop(_RainDropBuffer[id.x]);
}
