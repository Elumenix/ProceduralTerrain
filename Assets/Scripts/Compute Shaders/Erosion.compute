// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#define MAX_UINT 4294967295
#define EPSILON 1e-6

// The following code makes two assumptions
// 1. This code is Single Execution (Not runtime code, or running every frame)
// 2. The terrain is infinite, rather than being an island or suddenly stopping at the edge of the map

// Buffers
RWStructuredBuffer<float> _HeightBuffer; // working with floats is easier and more efficient than float3's
StructuredBuffer<int2> _BrushBuffer;

// Variables
uint numRainDrops;
uint radius;
uint _seed;
int resolution; // width & height (Number of faces, not vertices
float inertia;
float maxSediment;
float depositionRate;
float evaporationRate;
float softness;
float gravity;
float minSlope;

// Precomputed constants
static const float resolutionF = float(resolution);
static const float verticesPerRow = resolution + 1;
static const float fRadius = (float)radius + .001; // Needs to prevent division by 0
static const float radiusSquared = fRadius * fRadius;
// Approximation for the weight of all points within the radius of any arbitrary point
// This is a huge optimization over looping every nearby point, and eliminates the need for two passes
// This also assumes there would be more points beyond the edge of the map, which is what I want to imply in this implementation
static const float invNorm = 1.0f / (3.14169265 * pow(fRadius,3) / 3.0f);
static const uint brushLength = (radius + 1) * (radius + 1);


// Simulate a raindrop picking up and depositing sediment
void SimulateDrop(int x, int y) 
{
    // Local drop variables
    // Position is on a grid between mapWidth + 1 and mapHeight + 1
    // Raindrop will always start directly in the middle of a face, and at least 0.5 away from the edge of the world
    float2 position = float2(x + 0.5f, y + 0.5f);
    float velocity = 1.0f;
    float2 dir = 0.0f;
    float volume = 1.0f;
    float sediment = 0.0f;
    
    
    [loop] // Max Steps to ensure drop doesn't move endlessly
    for (int i = 0; i < 32; i++)
    {
        // We shouldn't continue if the starting position of the drop for this step is already off the map
        // Drops exactly on the right or bottom border should also be considered off because the gradient would consider them at an out-of-bounds cell
        if (any(position < 0.0f)) return;
        if (any(position >= resolutionF)) return;

        // Position clamping to a valid edge implies there is terrain outside the edge of the map that is a same height
        // Get row/column of top left index of (square) face
        const int2 colRow = floor(position);
        const float2 uv = frac(position); // sub-coordinate, top-left is (0,0)
        const float2 invUV = 1 - uv;
        const int index = colRow.y * verticesPerRow + colRow.x;

        // Get height of all vertices of quad
        const float nw = _HeightBuffer[index];                       // Top Left
        const float ne = _HeightBuffer[index + 1];                   // Top Right
        const float sw = _HeightBuffer[index + verticesPerRow];      // Bottom Left
        const float se = _HeightBuffer[index + verticesPerRow + 1];  // Bottom Right

        // Bilinear Interpolation of heights to get gradient direction and height
        float2 gradient = float2(lerp(ne-nw, se-sw, uv.y), lerp(sw-nw, se-ne, uv.x));
        const float oldHeight = nw * invUV.x * invUV.y + ne * uv.x * invUV.y + sw * invUV.x * uv.y + se * uv.x * uv.y;
        

        // Update flow direction based on gradient
        // Inertia determines how much gradient(terrain directed angle) is taken into account
        dir = dir * inertia - gradient * (1 - inertia);
        if (dot(dir, dir) < EPSILON) return;
        dir = normalize(dir) * .5f; // Drop moves fixed distance of .5f, so erosion is evenly distributed

        // Find next position
        const float2 newPos = position + dir;

        // Everything here is essentially a copy of the calculations we just did, but skipping calculating the gradient
        const int2 colRow2 = floor(newPos);
        const float2 uv2 = frac(newPos); // sub-coordinate, top-left is (0,0)
        const float2 invUV2 = 1 - uv2;
        const int nextIndex = colRow2.y * verticesPerRow + colRow2.x;
        const float nw2 = _HeightBuffer[nextIndex];                       // Top Left
        const float ne2 = _HeightBuffer[nextIndex + 1];                   // Top Right
        const float sw2 = _HeightBuffer[nextIndex + verticesPerRow];      // Bottom Left
        const float se2 = _HeightBuffer[nextIndex + verticesPerRow + 1];  // Bottom Right
        const float newHeight = nw2 * invUV2.x * invUV2.y + ne2 * uv2.x * invUV2.y + sw2 * invUV2.x * uv2.y + se2 * uv2.x * uv2.y;

        // Find the difference between the height of this vertex and the next one
        const float heightDif = newHeight - oldHeight;

        // Speed and size of the drop determine how much sediment it can hold
        const float dropCapacity = max(-heightDif, minSlope) * velocity * volume * maxSediment;
        
        // is drop ascending or full
        if (heightDif > 0.0f || sediment > dropCapacity)
        {
            float depositAmount;
            
            if (heightDif > 0) // Drop was ascending
            {
                // Either completely fill pit at oldPos or deposit all sediment there
                depositAmount = min(sediment, heightDif);
            }
            else
            {
                // A percentage of the surplus sediment is dropped
                depositAmount = (sediment - dropCapacity) * depositionRate;    
            }

            // Remove the lost sediment from the drop
            sediment -= depositAmount;
            
            // Add it to the vertices of the (square) face the drop is on
            // Weight for each vertex is bilinearly interpolated based on drops position in the face
            _HeightBuffer[index] += max(0, depositAmount * invUV.x * invUV.y);                // Top Left
            _HeightBuffer[index + 1] += max(0, depositAmount * uv.x * invUV.y);               // Top Right
            _HeightBuffer[index + verticesPerRow] += max(0, depositAmount * invUV.x * uv.y);  // Bottom Left
            _HeightBuffer[index + verticesPerRow + 1] += max(0, depositAmount * uv.x * uv.y); // Bottom Right
        }
        else // downhill and the drop can hold more sediment
        {
            // Amount of sediment to take won't be greater than the height difference
            float erosionAmount = min((dropCapacity - sediment) * softness, -heightDif);

            // Reduce erosion based on how close we are to the map edge, starting at a radius length away
            // The point of this is to prevent massive ravines forming at the edge of the map as a result of drop pooling
            const float edgeX = min(position.x, resolutionF - position.x);
            const float edgeY = min(position.y, resolutionF - position.y);
            const float edgeFactor = smoothstep(0.0f, fRadius, min(edgeX, edgeY));
            erosionAmount *= edgeFactor;

            // We take full amount as we can't track info for out-of-bounds vertices
            sediment += erosionAmount;

            for (uint vert = 0; vert < brushLength; vert++)
            {
                const int r = colRow.y + _BrushBuffer[vert].y;
                const int c = colRow.x + _BrushBuffer[vert].x;
                if (r < 0 || r > resolution || c < 0 || c > resolution)
                    continue;
                
                const float2 d = position - float2(c, r);
                const float dSquared = dot(d, d);
                
                if (dSquared <= radiusSquared)
                {
                    // Weight is normalized to be between 0 and 1 then that percentage is multiplied by the total amount eroded
                    // Because drop is on the map, vertices will be within the radius, so norm is never 0
                    const float weight = (fRadius - sqrt(dSquared)) * invNorm;
                    const int idx = r * verticesPerRow + c;


                    // Erode the terrain by the proper amount. Min prevents vertices from going below 0
                    //_HeightBuffer[idx] -= min(erosionAmount * weight, _HeightBuffer[idx]);
                    _HeightBuffer[idx] -= erosionAmount * weight;
                }
            }
        }

        // Velocity is adjusted depending upon the slope and gravity, max prevents negative square root
        velocity = sqrt(max(0.0f, velocity * velocity + heightDif * -gravity));

        // Update Position
        position = newPos;
        volume *= 1.0f - evaporationRate;
    }
}

// We're creating the random drop location at runtime in the gpu as an optimization over precomputing 300k+ drops on the cpu
// PCG Hash is a well known hash function. Implementation from here: https://www.reedbeta.com/blog/hash-functions-for-gpu-rendering/
uint PCG(uint input)
{
    uint state = input * 747796405u + 2891336453u;
    uint word = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;
    return (word >> 22u) ^ word;
}

[numthreads(64,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numRainDrops) return; // Don't need to iterate on

    uint hashVal = PCG(_seed + id.x);

    // Put seed within terrain boundaries, excluding right and bottom edges
    int x = hashVal % resolution; // Upper bits for x position
    int y = (hashVal >> 16) % resolution; // Lower Bits for y position

    // Converting to an index and starting the drop at that index
    SimulateDrop(x, y);
}
