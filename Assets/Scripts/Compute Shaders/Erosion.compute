// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#define MAX_UINT 4294967295

// The following code makes two assumptions
// 1. This code is Single Execution (Not runtime code, or running every frame)
// 2. The terrain is infinite, rather than being an island or suddenly stopping at the edge of the map

// Buffers
RWStructuredBuffer<float> _HeightBuffer; // working with floats is easier and more efficient than float3s

// Variables
uint numVertices;
uint radius;
uint _seed;
uint2 dimension; // {mapWidth, mapHeight} Refers to number of faces, not vertices 
float inertia;
float maxSediment;
float depositionRate;
float evaporationRate;
float softness;
float gravity;
float minSlope;

float3 GetGradientAndHeight(float2 pos)
{
    // Position clamping to a valid edge implies there is terrain outside the edge of the map that is a same height
    // Get row/column of top left index of (square) face
    int col = clamp((int)pos.x, 0, (int)dimension[0]);
    int row = clamp((int)pos.y, 0, (int)dimension[1]);
    int index = row * (dimension[0] + 1) + col;

    // Get height of all vertices of square
    float nw = _HeightBuffer[index];                           // Top Left
    float ne = _HeightBuffer[index + 1];                       // Top Right
    float sw = _HeightBuffer[index + (dimension[0] + 1)];      // Bottom Left
    float se = _HeightBuffer[index + (dimension[0] + 1) + 1];  // Bottom Right
    
    // Get coordinates of drop in (square) face.
    // Top left is (0,0)
    float u = pos.x - col;
    float v = pos.y - row;

    // Bilinear Interpolation of heights to get gradient direction and height
    float angleX = (ne - nw) * (1-v) + (se - sw) * v;
    float angleY = (sw - nw) * (1-u) + (se - ne) * u;
    float height = nw * (1-u) * (1-v) + ne * u * (1-v) + sw * (1-u) * v + se * u * v;

    return float3(angleX, angleY, height);
}


// Simulate a raindrop picking up and depositing sediment
void SimulateDrop(uint vert) 
{
    // These will be updated at the end of the loop
    int col = vert % (dimension[0] + 1);
    int row = vert / (dimension[0] + 1);
    int step = 0;
    
    // Local drop variables
    // Position is on a grid between mapWidth + 1 and mapHeight + 1
    // Raindrop will always start directly in the middle of a face, and at least 0.5 away from the edge of the world
    float2 position = float2(col + 0.5f, row + 0.5f);
    float velocity = 1.0f; // START VELOCITY VARIABLE?
    float2 dir = float2(0.0f, 0.0f);
    float volume = 1;
    float sediment = 0;

    

    // Max Steps to ensure drop doesn't move endlessly
    // TODO: Perhaps find a way so that heightAndGradient aren't calculated twice
    for (int i = 0; i < 64; i++)
    {
        // COULD EXCLUDE BORDERS HERE IF NECESSARY
        // We shouldn't continue if the starting position of the drop for this step is already off the map
        // Drops exactly on the right or bottom border should also be considered off because the gradient would consider them at an out-of-bounds cell
        if (position.x < 0.0f || position.y < 0.0f || position.x >= (float)dimension[0] || position.y >= (float)dimension[1]) return;
        
        // Get location variables
        col = (int)position.x;
        row = (int)position.y;
        float3 g = GetGradientAndHeight(position);
        float2 gradient = float2(g.x, g.y);
        float oldHeight = g.z;

        // Update flow direction based on gradient
        // Inertia determines how much gradient(terrain directed angle) is taken into account
        dir = dir * inertia - gradient * (1 - inertia);
        if (length(dir) == 0) return; // drop is no longer moving, stop early
        dir = normalize(dir) * .5f; // Drop moves fixed distance of .5f, so erosion is evenly distributed

        // Find next position
        float2 newPos = position + dir;
        float newHeight = GetGradientAndHeight(newPos).z;
        float heightDif = newHeight - oldHeight;

        // Speed and size of the drop determine how much sediment it can hold
        float dropCapacity = max(-heightDif, minSlope) * velocity * volume * maxSediment;
        
        // is drop ascending or full
        if (heightDif > 0 || sediment > dropCapacity)
        {
            float depositAmount;
            
            if (heightDif > 0) // Drop was ascending
            {
                // Either completely fill pit at oldPos or deposit all sediment there
                depositAmount = min(sediment, heightDif);
            }
            else
            {
                // A percentage of the surplus sediment is dropped
                depositAmount = (sediment - dropCapacity) * depositionRate;    
            }

            // Remove the lost sediment from the drop
            sediment -= depositAmount;

            // Get coordinates of drop in (square) face.
            // Top left is (0,0)
            float u = position.x - col;
            float v = position.y - row;
            int index = row * (dimension[0] + 1) + col;
            
            // Add it to the vertices of the (square) face the drop is on
            // Weight for each vertex is bilinearly interpolated based on drops position in the face

            _HeightBuffer[index] = max(_HeightBuffer[index], _HeightBuffer[index] + depositAmount * (1-u) * (1-v));                                                         // Top Left
            _HeightBuffer[index + 1] = max(_HeightBuffer[index+1], _HeightBuffer[index + 1] + depositAmount * u * (1-v));                                                   // Top Right
            _HeightBuffer[index + dimension[0] + 1] = max(_HeightBuffer[index + dimension[0] + 1], _HeightBuffer[index + dimension[0] + 1] + depositAmount * (1-u) * v); // Bottom Left
            _HeightBuffer[index + dimension[0] + 2] = max(_HeightBuffer[index + dimension[0] + 2], _HeightBuffer[index + dimension[0] + 2] + depositAmount * u * v);     // Bottom Right

            /*
            InterlockedMax(_HeightBuffer[index], _HeightBuffer[index] + (int)round(depositAmount * (1-u) * (1-v) * precision));                                     // Top Left
            InterlockedMax(_HeightBuffer[index + 1], _HeightBuffer[index + 1] + (int)round(depositAmount * u * (1-v) * precision));                                 // Top Right
            InterlockedMax(_HeightBuffer[index + _Dimension[0] + 1], _HeightBuffer[index + _Dimension[0] + 1] + (int)round(depositAmount * (1-u) * v * precision)); // Bottom Left
            InterlockedMax(_HeightBuffer[index + _Dimension[0] + 2], _HeightBuffer[index + _Dimension[0] + 2] + (int)round(depositAmount * u * v * precision));*/     // Bottom Right
        }
        else // downhill and the drop can hold more sediment
        {
            // Amount of sediment to take won't be greater than the height difference
            float erosionAmount = min((dropCapacity - sediment) * softness, -heightDif);

            // Reduce erosion based on how close we are to the map edge, starting at a radius length away
            // The point of this is to prevent massive ravines forming at the edge of the map as a result of drop pooling
            float edgeX = min(position.x, dimension[0] - position.x);
            float edgeY = min(position.y, dimension[1] - position.y);
            float edgeDistance = min(edgeX, edgeY);
            float edgeThreshold = max((float)radius, 0.001f); // prevent division by 0
            float edgeFactor = clamp(edgeDistance / edgeThreshold, 0.0f, 1.0f);
            erosionAmount *= edgeFactor;

            
            sediment += erosionAmount; // We take full amount as we can't track info for out-of-bounds vertices

            // We initially include invalid vertices so that weighting isn't heavy on ones inside the map
            // This should help give the illusion that the terrain continues outside the map
            int minC = (int)floor(position.x - radius);
            int maxC = (int)ceil(position.x + radius);
            int minR = (int)floor(position.y - radius);
            int maxR = (int)ceil(position.y + radius);

            float norm = 0;
            int r,c;
            float2 vertexPos;
            float d;
            float fRadius = (float)radius;
            
            // First pass, which finds the normalization factor
            for (r = minR; r <= maxR; r++)
            {
                for (c = minC; c <= maxC; c++)
                {
                    vertexPos = float2(c, r);
                    d = length(position - vertexPos);

                    if (d <= fRadius)
                    {
                        norm += radius - d;
                    }
                }
            }

            // We're now only checking valid vertices
            minC = max(0, minC);
            maxC = min(dimension[0], maxC);
            minR = max(0, minR);
            maxR = min(dimension[1], maxR);

            // Second pass actually lowers terrain based on erosionAmount and weight of points
            for (r = minR; r <= maxR; r++)
            {
                for (c = minC; c <= maxC; c++)
                {
                    int index = r * (dimension[0] + 1) + c;
                    vertexPos = float2(c, r);
                    d = length(position - vertexPos);

                    if (d <= fRadius)
                    {
                        // Weight is normalized to be between 0 and 1 then that percentage is multiplied by the total amount eroded
                        // Because drop is on the map, vertices will be within the radius, so norm is never 0
                        float weight = max(0, fRadius - d) / norm;

                        // Make sure that terrain won't erode past the bottom of the map
                        // The following code is combined in the Interlocked Add to minimize race conditions between calculations
                        //float remainingHeight = (float)_HeightBuffer[index] / precision;
                        float delta = min(erosionAmount * weight, _HeightBuffer[index]);

                        // Erode the terrain by the proper amount. Min is used instead of add to prevent race condition anomalies
                        _HeightBuffer[index] = min(_HeightBuffer[index], _HeightBuffer[index] - delta);
                        //InterlockedMin(_HeightBuffer[index], _HeightBuffer[index] - (int)round(delta * precision));
                    }
                }
            }
        }

        // Velocity is adjusted depending upon the slope and gravity, max prevents negative square root
        velocity = sqrt(max(0.0f, velocity * velocity + heightDif * -gravity));

        // Update Position
        position = newPos;
        volume *= 1-evaporationRate;

        // Update tracked variables
        step++;
    }
}

// We're creating the random drop location at runtime in the gpu as an optimization over precomputing 300k+ drops on the cpu
// PCG Hash is a well known hash function. Implementation from here: https://www.reedbeta.com/blog/hash-functions-for-gpu-rendering/
uint PCG(uint input)
{
    uint state = input * 747796405u + 2891336453u;
    uint word = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;
    return (word >> 22u) ^ word;
}

[numthreads(64,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numVertices) return; // Don't need to iterate on

    uint hashVal = PCG(_seed + id.x);

    // Put seed within terrain boundaries, excluding right and bottom edges
    int x = hashVal % dimension[0]; // Upper bits for x position
    int y = (hashVal >> 16) % dimension[1]; // Lower Bits for y position

    // Converting to an index and starting the drop at that index
    SimulateDrop(y * (dimension[0] + 1) + x);
}
