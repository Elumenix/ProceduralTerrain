// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#pragma kernel GenerateIndices

struct VertexData
{
    float3 position;
    float3 normal;
    float3 tangent;
};

// Buffers
StructuredBuffer<float> _HeightMap;
RWStructuredBuffer<VertexData> _VertexDataBuffer;

// Variables
uint numVertices;
uint resolution; // mapWidth : Based on number vertices
float scale;

// The majority of this Compute Shader is just calculations to get the normal for the current vertex
[numthreads(64,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numVertices) return; // Don't need to iterate on

    // find x/z position on the map
    uint x = id.x % resolution;
    uint z = id.x / resolution;
    float xPos = x * scale;
    float zPos = z * scale;
    float3 currentVertex = float3(xPos, _HeightMap[id.x], zPos);

    // Compute clamped neighbor indices. Clamping is necessary so that there's no out of bounds access and some triangles even out
    uint leftX = max(x-1, 0);
    uint rightX = min(x+1, resolution-1);
    uint topY = max(z-1, 0);
    uint bottomY = min(z+1, resolution-1);

    // The 6 vertices that make up the 6 planar triangles around the current vertex
    float3 left = float3(leftX * scale, _HeightMap[z * resolution + leftX], zPos);
    float3 top = float3(xPos, _HeightMap[topY * resolution + x], topY * scale);
    float3 right = float3(rightX * scale, _HeightMap[z * resolution + rightX], zPos);
    float3 topRight = float3(rightX * scale, _HeightMap[topY * resolution + rightX], topY * scale);
    float3 bottom = float3(xPos, _HeightMap[bottomY * resolution + x], bottomY * scale);
    float3 bottomLeft = float3(leftX * scale, _HeightMap[bottomY * resolution + leftX], bottomY * scale);

    // Get the direction of each triangle. Edge triangles will cancel out because of clamped vertices, saving us from branching
    float3 cross1 = cross(top - currentVertex, left - currentVertex);          // Triangle 1: Current -> Left -> Top
    float3 cross2 = cross(topRight - currentVertex, top - currentVertex);      // Triangle 2: Current -> Top -> TopRight
    float3 cross3 = cross(right - currentVertex, topRight - currentVertex);    // Triangle 3: Current -> TopRight -> Right
    float3 cross4 = cross(bottom - currentVertex, right - currentVertex);      // Triangle 4: Current -> Right -> Bottom
    float3 cross5 = cross(left - currentVertex, bottomLeft - currentVertex);   // Triangle 1: Current -> BottomLeft -> Left
    float3 cross6 = cross(bottomLeft - currentVertex, bottom - currentVertex); // Triangle 2: Current -> Bottom -> BottomLeft
    
    // Normal will be the normalized sum of all triangles around the vertex
    float3 normal = normalize(cross1 + cross2 + cross3 + cross4 + cross5 + cross6);
    if (x == 0 || z == 0) normal = float3(0,1,0);

    // Essentially get the slope where the vertex is along the x-axis. A clamped vertex will be equal to the current vertex
    float3 tangent = right - left;
    if (x == 0) tangent = float3(1,1,1);

    // Make the tangent Orthogonal to the normal
    tangent = normalize(tangent - dot(tangent, normal) * normal); 
    
    // Update relevant data for each vertex
    _VertexDataBuffer[id.x].position = currentVertex;
    _VertexDataBuffer[id.x].normal = normal;
    _VertexDataBuffer[id.x].tangent = tangent;
}


RWStructuredBuffer<uint> _IndexBuffer;
uint quadWidth;
uint numQuads;

[numthreads(64,1,1)]
void GenerateIndices (uint3 id : SV_DispatchThreadID)
{
    // Non-existent
    if (id.x >= numQuads) return;
    
    int y = id.x / quadWidth;
    int x = id.x % quadWidth;

    // Row Offsets
    int rowOffset = y * (quadWidth + 1);
    int nextRowOffset = (y + 1) * (quadWidth + 1);

    // The four corners of this quad
    int current = rowOffset + x;
    int next = current + 1;
    int below = nextRowOffset + x;
    int belowNext = below + 1;

    // Which index in the indices array is this starting at
    int index = 6 * id.x;
            
    // Top Left Triangle
    _IndexBuffer[index] = current;
    _IndexBuffer[index + 1] = below;
    _IndexBuffer[index + 2] = next;
            
    // Bottom right triangle
    _IndexBuffer[index + 3] = next;
    _IndexBuffer[index + 4] = below;
    _IndexBuffer[index + 5] = belowNext;
}
