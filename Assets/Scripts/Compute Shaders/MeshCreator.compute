// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct VertexData
{
    float3 position;
    float u;
    float3 normal;
    float v;
    float3 tangent;
};

// Buffers
StructuredBuffer<float> _HeightMap;
RWStructuredBuffer<VertexData> _VertexDataBuffer;

// Variables
uint numVertices;
uint resolution; // mapWidth : Based on number vertices
float scale;

// The majority of this Compute Shader is just calculations to get the normal for the current vertex
[numthreads(64,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numVertices) return; // Don't need to iterate on

    // find x/z position on the map
    uint x = id.x % resolution;
    uint z = id.x / resolution;
    float xPos = x * scale;
    float zPos = z * scale;
    
    float3 currentVertex = float3(xPos, _HeightMap[id.x], zPos);
    float3 normalSum = float3(0, 0, 0);
    
    // Check 4 adjacent quads (6 triangles total)
    // Quad 1: Top-left : Only 1 triangle here because of planar faces
    if (x > 0 && z > 0)
    {
        float3 top = float3(xPos, _HeightMap[id.x - resolution], (z-1) * scale);
        float3 left = float3((x-1) * scale, _HeightMap[id.x - 1], zPos);

        // Triangle 1: Current -> Top -> Left
        float3 AB = left - currentVertex;
        float3 AC = top - currentVertex;
        normalSum += cross(AB, AC); 
    }

    // Quad 2: Top-right
    if (x < resolution - 1 && z > 0)
    {
        float3 top = float3(xPos, _HeightMap[id.x - resolution], (z-1) * scale);
        float3 right = float3((x+1) * scale, _HeightMap[id.x + 1], zPos);
        float3 topRight = float3((x+1) * scale, _HeightMap[id.x - resolution + 1], (z-1) * scale);

        
        // Triangle 1: Current -> Top -> TopRight
        float3 AB = topRight - currentVertex;
        float3 AC = top - currentVertex;
        normalSum += cross(AB, AC);
        
        // Triangle 2: Current -> TopRight -> Right
        AB = right - currentVertex;
        AC = topRight - currentVertex;
        normalSum += cross(AB, AC);
    }

    // Quad 3: Bottom-right : Only 1 triangle because of planer vertices
    if (x < resolution - 1 && z < resolution - 1)
    {
        float3 right = float3((x+1) * scale, _HeightMap[id.x + 1], zPos);
        float3 bottom = float3(xPos, _HeightMap[id.x + resolution], (z+1) * scale);
        
        // Triangle 1: Current -> Right -> Bottom
        float3 AB = bottom - currentVertex;
        float3 AC = right - currentVertex;
        normalSum += cross(AB, AC);
    }

    // Quad 4: Bottom-left
    if (x > 0 && z < resolution - 1)
    {
        float3 left = float3((x-1) * scale, _HeightMap[id.x - 1], zPos);
        float3 bottom = float3(xPos, _HeightMap[id.x + resolution], (z+1) * scale);
        float3 bottomLeft = float3((x-1) * scale, _HeightMap[id.x + resolution - 1], (z+1) * scale);
        
        // Triangle 1: Current -> BottomLeft -> Left
        float3 AB = left - currentVertex;
        float3 AC = bottomLeft - currentVertex;
        normalSum += cross(AB, AC);
        
        // Triangle 2: Current -> Bottom -> BottomLeft
        AB = bottomLeft - currentVertex;
        AC = bottom - currentVertex;
        normalSum += cross(AB, AC);
    }

    float3 normal = normalize(normalSum);

    // Essentially get the slope where the vertex is along the x-axis
    float3 tangent;
    if (x > 0 && x < resolution - 1) 
    {
        float3 rightVertex = float3((x + 1) * scale, _HeightMap[id.x + 1], zPos);
        float3 leftVertex = float3((x - 1) * scale, _HeightMap[id.x - 1], zPos);
        tangent = normalize(rightVertex - leftVertex);
    }
    else if (x == 0) // Left edge case
    {
        float3 rightVertex = float3((x + 1) * scale, _HeightMap[id.x + 1], zPos);
        tangent = normalize(rightVertex - currentVertex);
    }
    else // Right edge case
    {
        float3 leftVertex = float3((x - 1) * scale, _HeightMap[id.x - 1], zPos);
        tangent = normalize(currentVertex - leftVertex);
    }

    // Make the tangent Orthogonal to the normal
    tangent = normalize(tangent - dot(tangent, normal) * normal); 
    
    // Update relevant data for each vertex
    _VertexDataBuffer[id.x].position = currentVertex;
    _VertexDataBuffer[id.x].u = xPos; // World Space UV
    _VertexDataBuffer[id.x].normal = normal;
    _VertexDataBuffer[id.x].v = zPos; // World Space UV
    _VertexDataBuffer[id.x].tangent = tangent;
}
