// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct VertexData
{
    float3 position;
    float u;
    float3 normal;
    float v;
};

// Buffers
RWStructuredBuffer<float> _HeightMap;
RWStructuredBuffer<VertexData> _VertexDataBuffer;

// Variables
uint numVertices;
uint resolution; // mapWidth : Based on number vertices
float scale; 


[numthreads(64,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numVertices) return; // Don't need to iterate on

    // find x/z position on the map
    int x = id.x % resolution;
    int z = id.x / resolution;

    // Update relevant data for each vertex
    _VertexDataBuffer[id.x].position = float3(x * scale, _HeightMap[id.x], z * scale);
    _VertexDataBuffer[id.x].u = x * scale; // World Space UV
    _VertexDataBuffer[id.x].v = z * scale; // World Space UV
}
