#pragma kernel HeightMapReduction // Kernel to reduce heightmap values
#pragma kernel MinMaxReduction    // Kernel to compute min/max values

// First Pass Buffers
RWStructuredBuffer<float> _HeightMapBuffer;
RWStructuredBuffer<float2> _MinMax; // x = min, y = max

// Second pass Buffers
RWStructuredBuffer<float2> _MinMaxInput;
RWStructuredBuffer<float2> _MinMaxResult;

// Global
uint numVertices;

// Shared memory for reduction within a thread group
groupshared float2 _GroupMinMax[64]; 

[numthreads(8,8,1)]
void HeightMapReduction (uint3 id : SV_DispatchThreadID, uint groupIndex : SV_GroupIndex)
{
    // Initialize group shared memory with extreme values and synchronize
    _GroupMinMax[groupIndex] = float2(3.402823466e+38F, -3.402823466e+38F);
    GroupMemoryBarrierWithGroupSync();

    // Each thread processes 4 elements (from 256 elements down to 4)
    uint baseIdx = id.x * 256;
    for (uint i = 0; i < 4; ++i)
    {
        // Confirm this is a valid vertex before reading
        uint idx = baseIdx + groupIndex * 4 + i;
        if (idx < numVertices)
        {
            // Check if this value is the min or max of the group of 4
            float val = _HeightMapBuffer[idx];
            _GroupMinMax[groupIndex].x = min(_GroupMinMax[groupIndex].x, val);
            _GroupMinMax[groupIndex].y = max(_GroupMinMax[groupIndex].y, val);
        }
    }

    GroupMemoryBarrierWithGroupSync();

    // Reduce within the group (from 64 elements down to 1)
    for (uint stride = 32; stride > 0; stride >>= 1) {
        // element 0 checks against 32, 1 against 33, 2 against 34, etc.
        // Stride is halving every loop
        if (groupIndex < stride)
        {
            _GroupMinMax[groupIndex].x = min(_GroupMinMax[groupIndex].x, _GroupMinMax[groupIndex + stride].x);
            _GroupMinMax[groupIndex].y = max(_GroupMinMax[groupIndex].y, _GroupMinMax[groupIndex + stride].y);
        }

        // This is not thread local (we're changing values other threads will read)
        GroupMemoryBarrierWithGroupSync();
    }

    
    // Write group result to global buffer
    // This was only the Min/Max of this thread group
    if (groupIndex == 0)
    {
        _MinMax[id.x] = _GroupMinMax[0];
    }
}

// This is essentially the same as above. We're just operating on float2's instead of floats
[numthreads(64,1,1)]
void MinMaxReduction (uint3 id : SV_DispatchThreadID)
{
    uint idx = id.x;
    _GroupMinMax[idx] = float2(3.402823466e+38F, -3.402823466e+38F);
    
    if (idx < numVertices)
    {
        // This part is a bit different because we already know the min/max of each individual float2
        float2 val = _MinMaxInput[idx];
        _GroupMinMax[idx].x = min(_GroupMinMax[idx].x, val.x);
        _GroupMinMax[idx].y = max(_GroupMinMax[idx].y, val.y);
    }
    
    GroupMemoryBarrierWithGroupSync();


    for (uint stride = 32; stride > 0; stride >>= 1)
    {
        if (idx < stride) {
            _GroupMinMax[idx].x = min(_GroupMinMax[idx].x, _GroupMinMax[idx + stride].x);
            _GroupMinMax[idx].y = max(_GroupMinMax[idx].y, _GroupMinMax[idx + stride].y);
        }
        GroupMemoryBarrierWithGroupSync();
    }

    // Found our final result
    if (idx == 0)
    {
        _MinMaxResult[0] = _GroupMinMax[0];
    }
}