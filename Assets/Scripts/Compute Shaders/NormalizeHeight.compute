// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Buffers
RWStructuredBuffer<float> _HeightMapBuffer;
StructuredBuffer<float2> _RangeValues; // This is essentially float2 {min, max}
StructuredBuffer<float> _HeightCurveBuffer; // float[128] to sample the animation curve

// Global Variables
uint numVertices;
float heightMultiplier;


float InverseLerp(float minHeight, float maxHeight, float value)
{
    return (value - minHeight) / (maxHeight - minHeight);
}  

// The main point of this compute shader is just to normalize the heights of vertices to be between 0 and 1
// I figured that this would be faster than doing it with the cpu for large numbers of vertices
[numthreads(64,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // This doesn't exist
    if (id.x >= numVertices) return;

    // Return a value between 0 and 1 based on where the height is between the min and max values
    float normalizedHeight = InverseLerp(_RangeValues[0].x, _RangeValues[0].y, _HeightMapBuffer[id.x]);

    // Sample about where on the animation curve this height value would line up with
    float scaledValue = lerp(0, 127, normalizedHeight);
    float scaledMultiplier = lerp(_HeightCurveBuffer[floor(scaledValue)], _HeightCurveBuffer[ceil(scaledValue)], frac(scaledValue));

    // Scale the height by the height curve and the height Multiplier
    _HeightMapBuffer[id.x] = normalizedHeight * scaledMultiplier * heightMultiplier;
}
